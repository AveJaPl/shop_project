// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id        Int      @id @default(autoincrement())
  name      String
  surname   String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  isAdmin  Boolean  @default(false)

  carts     Carts?
  orders    Orders[]
  reviews   Reviewes[]

}

model Products {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  price       Float
  categoryId  Int
  subCategoryId Int?
  countInStock Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt()


  category Categories @relation(fields: [categoryId], references: [id])
  subCategory SubCategories? @relation(fields: [subCategoryId], references: [id])
  images      Images[]
  productOrder OrderDetails[]
  reviews     Reviewes[]
  cartDetails CartDetails[]

}

model Reviewes{
  id        Int       @id @default(autoincrement())
  productId Int
  userId    Int
  comment   String
  rating    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt()

  product Products @relation(fields: [productId], references: [id])
  user Users @relation(fields: [userId], references: [id])
}

model Categories {
  id       Int       @id @default(autoincrement())
  name     String

  products Products[]
  subCategories SubCategories[]
}

model SubCategories {
  id       Int       @id @default(autoincrement())
  name     String
  categoryId Int

  category Categories @relation(fields: [categoryId], references: [id])
  products Products[]
}

model Images {
  id        Int       @id @default(autoincrement())
  url       String
  productId Int

  product Products @relation(fields: [productId], references: [id])
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Orders {
  id        Int       @id @default(autoincrement())
  userId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  status    OrderStatus    @default(PENDING)

  products  OrderDetails[]
  user      Users      @relation(fields: [userId], references: [id])  
}

model OrderDetails{
  id        Int       @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int

  product Products @relation(fields: [productId], references: [id])
  order Orders @relation(fields: [orderId], references: [id])

}

model Carts {
  id        Int       @id @default(autoincrement())
  userId    Int      @unique

  user Users @relation(fields: [userId], references: [id])

  cartDetails CartDetails[]
}

model CartDetails {
  id       Int       @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int

  cart Carts @relation(fields: [cartId], references: [id])
  product Products @relation(fields: [productId], references: [id])
}